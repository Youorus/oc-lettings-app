name: Main Pipeline (test → release → docker)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  test:
    name: Tests on main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Django checks & tests
        env:
          DJANGO_SETTINGS_MODULE: oc_lettings_site.settings
        run: |
          python -m py_compile $(git ls-files '*.py')
          python manage.py check
          pytest -q

  release:
    name: Auto tag & GitHub Release
    needs: test               # ← ne tourne que si les tests sont OK
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.ver.outputs.next }}   # on expose le tag pour le job docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0                  # on veut les tags existants
      - name: Compute next version (minor++ ; >10 => major+1, minor=0)
        id: ver
        shell: bash
        run: |
          last_tag=$(git tag --list 'v*' --sort=-v:refname | head -n1)
          if [[ -z "$last_tag" ]]; then
            major=1; minor=0
          else
            ver="${last_tag#v}"
            IFS='.' read -r major minor <<< "$ver"
            minor=${minor:-0}
            minor=$((minor+1))
            if [[ $minor -gt 10 ]]; then
              major=$((major+1))
              minor=0
            fi
          fi
          next="v${major}.${minor}"
          echo "next=${next}" >> "$GITHUB_OUTPUT"
          echo "Next version: ${next}"
      - name: Create git tag
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.ver.outputs.next }}" -m "Release ${{ steps.ver.outputs.next }}"
          git push origin "${{ steps.ver.outputs.next }}"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.next }}
          name: ${{ steps.ver.outputs.next }}
          generate_release_notes: true

  docker:
    name: Build & Push Docker
    needs: release            # ← ne tourne qu'après la release
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.release.outputs.tag }}                # ex: v1.3
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}    # à définir dans Secrets
      DOCKERHUB_IMAGE: oc-lettings-site
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_IMAGE }}:${{ env.TAG }}
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_IMAGE }}:latest
          labels: |
            org.opencontainers.image.version=${{ env.TAG }}
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}