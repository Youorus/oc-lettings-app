name: Main Pipeline (tests ‚Üí build ‚Üí release ‚Üí docker)

on:
  push:
    branches: [ main ]      # üîî se d√©clenche √† chaque push sur main
  workflow_dispatch: {}     # run manuel possible

permissions:
  contents: write

jobs:
  gate:
    name: Gate (run only if HEAD contains origin/develop)
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.chk.outputs.run }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch develop
        run: git fetch origin develop:origin/develop
      - name: Check ancestry (HEAD includes develop?)
        id: chk
        shell: bash
        run: |
          if git merge-base --is-ancestor origin/develop HEAD; then
            echo "run=yes" >> "$GITHUB_OUTPUT"
            echo "HEAD includes origin/develop ‚Üí OK"
          else
            echo "run=no" >> "$GITHUB_OUTPUT"
            echo "HEAD does NOT include origin/develop ‚Üí skip"
          fi

  tests:
    name: ‚úÖ Tests
    needs: gate
    if: needs.gate.outputs.run == 'yes'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Collect static files (fix manifest error)
        env:
          DJANGO_SETTINGS_MODULE: oc_lettings_site.settings
        run: |
          python manage.py collectstatic --noinput --clear
      - name: Django checks & tests
        env:
          DJANGO_SETTINGS_MODULE: oc_lettings_site.settings
          DJANGO_TESTS: "1"
        run: |
          python -m py_compile $(git ls-files '*.py')
          python manage.py check
          pytest -q

  build:
    name: üß± Build Docker (no push)
    needs: tests
    if: needs.tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Docker build (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          load: false
          tags: ci-validation:latest

  release:
    name: üè∑Ô∏è Create Tag + GitHub Release
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.ver.outputs.next }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Compute next version
        id: ver
        shell: bash
        run: |
          last_tag=$(git tag --list 'v*' --sort=-v:refname | head -n1)
          if [[ -z "$last_tag" ]]; then
            major=1; minor=0
          else
            ver="${last_tag#v}"
            IFS='.' read -r major minor <<< "$ver"
            minor=${minor:-0}
            minor=$((minor+1))
            if [[ $minor -gt 10 ]]; then
              major=$((major+1)); minor=0
            fi
          fi
          next="v${major}.${minor}"
          echo "next=${next}" >> "$GITHUB_OUTPUT"
          echo "Next version: ${next}"
      - name: Create git tag
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.ver.outputs.next }}" -m "Release ${{ steps.ver.outputs.next }}"
          git push origin "${{ steps.ver.outputs.next }}"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.next }}
          name: ${{ steps.ver.outputs.next }}
          generate_release_notes: true

  docker:
    name: üê≥ Build & Push Docker
    needs: release
    if: needs.release.result == 'success' && needs.gate.outputs.run == 'yes'
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.release.outputs.tag }}
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_IMAGE: oc-lettings-site
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_IMAGE }}:${{ env.TAG }}
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_IMAGE }}:latest
          labels: |
            org.opencontainers.image.version=${{ env.TAG }}
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}