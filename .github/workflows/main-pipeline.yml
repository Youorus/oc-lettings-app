name: Main Pipeline (tests ‚Üí build ‚Üí release ‚Üí docker)

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write

jobs:
  gate:
    name: Gate (check ancestry)
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.chk.outputs.run }}
      is_ancestor: ${{ steps.chk.outputs.is_ancestor }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: .git  # Seulement les fichiers git pour cette √©tape

      - name: Check ancestry (HEAD includes develop?)
        id: chk
        run: |
          git fetch origin develop --depth=1
          if git merge-base --is-ancestor origin/develop HEAD; then
            echo "run=yes" >> "$GITHUB_OUTPUT"
            echo "is_ancestor=true" >> "$GITHUB_OUTPUT"
            echo "HEAD includes origin/develop ‚Üí OK"
          else
            echo "run=no" >> "$GITHUB_OUTPUT"
            echo "is_ancestor=false" >> "$GITHUB_OUTPUT"
            echo "HEAD does NOT include origin/develop ‚Üí skip"
          fi

  tests:
    name: ‚úÖ Tests
    needs: gate
    if: needs.gate.outputs.should_run == 'yes'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src/
            requirements.txt
            manage.py
            pytest.ini
            .coveragerc

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Django checks & tests
        env:
          DJANGO_SETTINGS_MODULE: oc_lettings_site.settings
          PYTHONPATH: src
        run: |
          python -m py_compile $(find src -name '*.py')
          python manage.py check --fail-level WARNING
          pytest -x --cov --cov-report=term-missing

  build:
    name: üß± Build Docker (cache)
    needs: [gate, tests]
    if: needs.gate.outputs.should_run == 'yes' && needs.tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
        id: buildx

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker build with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ci-validation:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: üè∑Ô∏è Create Tag + GitHub Release
    needs: [gate, build]
    if: needs.gate.outputs.should_run == 'yes' && needs.build.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.ver.outputs.next }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: .git

      - name: Compute next version
        id: ver
        run: |
          # Utilisation de git describe pour une m√©thode plus robuste
          last_tag=$(git describe --tags --abbrev=0 --match 'v*' 2>/dev/null || echo "")
          if [[ -z "$last_tag" ]]; then
            echo "next=v1.0" >> "$GITHUB_OUTPUT"
          else
            # Extraction s√©curis√©e des versions
            ver="${last_tag#v}"
            IFS='.' read -r major minor patch <<< "${ver}.0.0"
            minor=$((minor + 1))
            if [[ $minor -gt 9 ]]; then
              major=$((major + 1))
              minor=0
            fi
            echo "next=v${major}.${minor}" >> "$GITHUB_OUTPUT"
          fi
          echo "Next version: ${{ steps.ver.outputs.next }}"

      - name: Create git tag
        env:
          TAG: ${{ steps.ver.outputs.next }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.next }}
          name: ${{ steps.ver.outputs.next }}
          generate_release_notes: true
          draft: false
          prerelease: false

  docker:
    name: üê≥ Build & Push Docker
    needs: [gate, release]
    if: needs.gate.outputs.should_run == 'yes' && needs.release.result == 'success'
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.release.outputs.tag }}
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_IMAGE: oc-lettings-site
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_IMAGE }}:${{ env.TAG }}
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_IMAGE }}:latest
          labels: |
            org.opencontainers.image.version=${{ env.TAG }}
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}